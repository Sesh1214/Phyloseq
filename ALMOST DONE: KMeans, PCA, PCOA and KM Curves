library(readxl)
library(ggplot2)
library(phyloseq)
library(magrittr)
library(tidyverse)
library(FactoMineR)
library(vegan)
library(ape)
library(factoextra)
library(RColorBrewer)
library(aPCoA)
library(grDevices)

#setwd('~/Desktop/Seshadhri_Phyloseq/')

#The files used in this are transposed from the original so that the species/genus/class etc are rows - hence the taxa_are_rows=TRUE argument
metadata <- read.table("16s_Progression_Data.tsv", sep="\t", header=TRUE, row.names = 1)
otu <- read.table("16s_Community.tsv", sep="\t", header=TRUE, row.names = 1)

#replace . with _
rownames(metadata) <- gsub("\\.", "_", rownames(metadata))
colnames(otu) <- gsub("\\.", "_", colnames(otu))
colnames(otu)
rownames(metadata)

#ensure samples are consistent between metadata and otu data
rownames(metadata) %in% colnames(otu)
#filter out samples from metadata and reorder to clean it up a bit
metadata %<>% rownames_to_column('sample_id')
metadata %<>% filter(sample_id %in% colnames(otu))
#reorder otu data
otu %<>% rownames_to_column('taxa')
otu %<>% select(c('taxa', metadata$sample_id))
otu %<>% column_to_rownames('taxa')
metadata %<>% column_to_rownames('sample_id')

#ensure all rownames of metadata match colnames of otu
all(rownames(metadata) == colnames(otu))


# Prepare OTU table
otu_tab <- otu_table(otu, taxa_are_rows = TRUE)
# Prepare sample data
sample_dat <- sample_data(metadata)

#read in OTU taxonomy data provided by Seshadhri
tax_dat <- read_excel('Species_Reference.xlsx', col_names = c('Genus', 'OTU'))
#coerce other taxonomic levels for the minute
tax_dat$Domain <- 'Unknown'
tax_dat$Phylum <- 'Unknown'
tax_dat$Class <- 'Unknown'
tax_dat$Order <- 'Unknown'
tax_dat$Family <- 'Unknown'
tax_dat$Species <- 'Unknown'

tax_dat %<>% select(Domain, Phylum, Class, Order, Family, Genus, Species, OTU)

#check all the OTU names match
all(tax_dat$OTU == rownames(otu))
tax_dat %<>% column_to_rownames('OTU')

#Make Tax table object
tax_tab <- tax_table(tax_dat)

# Retrieve ranks
rank_names(tax_tab)

#Make Phyloseq Object
ps <- merge_phyloseq(otu_tab, sample_dat, tax_tab)

#coerce rank names
colnames(tax_table(ps)) <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")

#check rank names
rank_names(ps)
ps_genus <- tax_glom(ps, "Genus")
p1 <- plot_bar(ps_genus, fill = "Genus")
ggsave(filename = 'ps_genus.pdf', plot=p1, width=30, height=8)

#Family level Phyloseq Object
fam_glom <- readRDS(file='For_Seshadhri_Family_Glom.RDS')
rank_names(fam_glom)
ps_family <- tax_glom(fam_glom, "Family")
p2 <- plot_bar(ps_family, fill = "Family")
ggsave(filename = 'ps_family.pdf', plot=p2, width=30, height=8)

#Trying to Create a Phylogenetic Tree with the Ape package and then a Heatmap
prog_data <- sample_data(data.frame(Progression = metadata$progression, Progression_Days = metadata$progression_days, row.names = sample_names(ps), stringsAsFactors = FALSE))
head(prog_data)
library("ape")
genus_tree <- rtree(ntaxa(ps), rooted = TRUE, tip.label = taxa_names(ps))
plot(genus_tree)
family_tree <- rtree(ntaxa(fam_glom), rooted = TRUE, tip.label = taxa_names(fam_glom))
plot(family_tree)

#Combine New Data with Existing Phyloseq Objects
genus_phyloseq <- merge_phyloseq(ps, prog_data, genus_tree)
genus_phyloseq
family_phyloseq <- merge_phyloseq(fam_glom, prog_data, family_tree)
family_phyloseq

#Plot Tree and Heatmap with New Combined Data
plot_tree(genus_phyloseq, color = "Progression_Days", label.tips = "taxa_names(ps)", ladderize = "left", plot.margin = 0.3)
plot_heatmap(genus_phyloseq)
plot_heatmap(family_phyloseq)

#ComplexHeatMap Installation
if (!require("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)

#Convert the OTU Table, Sample Data and Taxonomy Table for Genus Level to a Dataframe and Matrix
otu_ps <- as(otu_table(ps), "matrix")
otu_ps_df <- as.data.frame(otu_ps)
otu_ps_df_transposed <- t(otu_ps_df)
class(otu_ps_df)
otu_ps_matrix <- as.matrix(otu_ps)
otu_ps_matrix_transposed <- t(otu_ps_matrix)

#Try to do k-means clustering on this
set.seed(5)
ps.km <- kmeans(otu_ps_matrix_transposed, 3, nstart = 20)
ps.km

#Visualise the cluster at genus level
fviz_cluster(ps.km, data = otu_ps_matrix_transposed, geom = c("point", "text"), ellipse = TRUE, pointsize = 1, ellipse.type = "euclid")

#Convert the OTU Table, Sample Data and Taxonomy Table for Family Level to a Dataframe and Matrix

otu_famglom <- as(otu_table(fam_glom), "matrix")
otu_famglom_df <- as.data.frame(otu_famglom)
class(otu_famglom_df)
otu_famglom_matrix <- as.matrix(otu_famglom)
class(otu_famglom_matrix)
otu_famglom_matrix_transposed <- t(otu_famglom_matrix) #Need to Transpose as it otherwise clusters the OTUs

#Try to Do K-Means Clustering On This
set.seed(3)
famglom.km <- kmeans(otu_famglom_matrix_transposed, 3, nstart = 20)
famglom.km 


#Visualise the cluster at Family Level
fviz_cluster(famglom.km, data = otu_famglom_matrix_transposed, geom = c("point", "text"), ellipse = TRUE, pointsize = 1, ellipse.type = "euclid")

#Do PCA on the Transposed Dataframes
pca_otu_matrix_transposed <- prcomp(otu_ps_matrix_transposed, scale = TRUE)
pca_otu_matrix_transposed
pca_famglom_transposed <- prcomp(otu_famglom_matrix_transposed, scale = TRUE)
pca_famglom_transposed

#Data from the PCA analysis - PS Transposed
names(pca_otu_matrix_transposed)
pca_otu_matrix_transposed$sdev
pca_otu_matrix_transposed$rotation
pca_otu_matrix_transposed$center
pca_otu_matrix_transposed$scale
pca_otu_matrix_transposed$x
pca_otu_matrix_transposed_variance <- pca_otu_matrix_transposed$sdev^2
component_pca_otu_ps <- pca_otu_matrix_transposed_variance/sum(pca_otu_matrix_transposed_variance)
component_pca_otu_ps
plot(component_pca_otu_ps, xlab = "Principal Component", ylab = "Proportion of Variance Explained", ylim = c(0,1), type = "b")
plot(cumsum(component_pca_otu_ps), xlab = "Principal Component", ylab = "Cumulative Proportion of Variance Explained", ylim = c(0,1), type = "b")

#Data from the PCA analysis - Fam_glom

names(pca_famglom_transposed)
pca_famglom_transposed$sdev
pca_famglom_transposed$rotation
pca_famglom_transposed$center
pca_famglom_transposed$scale
pca_famglom_transposed$x
pca_famglom_transposed_variance <- pca_famglom_transposed$sdev^2
component_pca_famglom <- pca_famglom_transposed_variance/sum(pca_famglom_transposed_variance)
component_pca_famglom
plot(component_pca_famglom, xlab = "Principal Component", ylab = "Proportion of Variance Explained", ylim = c(0,1), type = "b")
plot(cumsum(component_pca_famglom), xlab = "Principal Component", ylab = "Cumulative Proportion of Variance Explained", ylim = c(0,1), type = "b")


#Calculate the Distance Matrix First to use for PCOA analysis at Genus and Family Level
dist_matrix_ps <- dist(otu_ps_matrix_transposed, method = "manhattan")
dist_matrix_famglom <- dist(otu_famglom_matrix_transposed, method = "manhattan")

#PCOA Analysis using the PCOA function from the Ape package
pcoa_ps <- pcoa(dist_matrix_ps, correction = "none", rn = NULL)
pcoa_famglom <- pcoa(dist_matrix_famglom, correction = "none", rn = NULL)

#Plot the Results Above
biplot(pcoa_ps, Y = NULL, plot.axes = c(1,2), dir.axis1=1, dir.axis2=1, rn = NULL, main = NULL)
biplot(pcoa_famglom, Y = NULL, plot.axes = c(1,2), dir.axis1=1, dir.axis2=1, rn = NULL, main = NULL)

#Make this Biplot look better - Phyloseq package has functions for ordination including using Manhattan Distances
famglom_ord <- ordinate(fam_glom, "PCoA", "manhattan")
plot_famglom_samples_ord_mets <- plot_ordination(fam_glom, famglom_ord, type = "samples", label = "X.SampleID", color = "metastasis")
plot_famglom_samples_ord_mets
plot_famglom_samples_ord_progression <- plot_ordination(fam_glom, famglom_ord, type = "samples", label = "X.SampleID", color = "Progression")
plot_famglom_samples_ord_progression
plot_famglom_samples_ord_category1 <- plot_ordination(fam_glom, famglom_ord, type = "samples", label = "X.SampleID", color = "Category1")
plot_famglom_samples_ord_category1
plot_famglom_samples_ord_category2 <- plot_ordination(fam_glom, famglom_ord, type = "samples", label = "X.SampleID", color = "Category2")
plot_famglom_samples_ord_category2 
plot_famglom_samples_ord_clincat <- plot_ordination(fam_glom, famglom_ord, type = "samples", label = "X.SampleID", color = "ClinicalCategory")
plot_famglom_samples_ord_clincat

data_from_famglom_samples_ord_mets <- ggplot_build(plot_famglom_samples_ord_mets)
data_from_famglom_samples_ord_mets$data
df_data_from_famglom_samples_ord_mets <- as.data.frame(data_from_famglom_samples_ord_mets$data)
colnames(df_data_from_famglom_samples_ord_mets)
kmeans_df_famglom <- df_data_from_famglom_samples_ords_mets[,c('x','y')]
head(kmeans_df_famglom)
cluster_famglom <- kmeans(kmeans_df_famglom, 3, nstart = 20)
fviz_cluster(cluster_famglom, data = kmeans_df_famglom, palette = c("#2E9FDF", "#00AFBB", "#E7B800"), geom = "point", ellipse.type = "convex", ggtheme = theme_bw(), main = "Clusters of Patient Samples")

#CODE WORKS PERFECTLY UNTIL THIS POINT. FROM HERE ON OUT, IT HAS TO BE WORKED ON.
#KM Curves

library(survival)
library(ggsurvfit)
famglom_metadata <- read.csv("Famglom_Metadata.csv", sep =",", header = TRUE, row.names = 1)
head(famglom_metadata)
Surv(famglom_metadata$progression_days, famglom_metadata$Progression)
s1 <- survfit(Surv(famglom_metadata$progression_days, famglom_metadata$Progression) ~ 1, data = famglom_metadata)
str(s1)
survfit2(Surv(famglom_metadata$progression_days, famglom_metadata$Progression) ~ 1 , data = famglom_metadata) %>% ggsurvfit() + labs (x = "Days to Progression", y = "Overall Progression Probability")
#END
